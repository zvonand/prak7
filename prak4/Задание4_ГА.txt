== Задание по генетическому алгоритму ==

Реализуйте генетический алгоритм.
(в генетических алгоритмах имитируется естественный отбор в популяции на протяжении многих поколений)

Решите с его помощью задачу, в которой для оценки решения необходимо имитировать смену поколений в клеточном автомате.
(но это другие поколения)

Исследуйте зависимость стабильности и качества решения, а также вычислительных затрат на выполнение алгоритма от интенсивности мутации.

=== Решаемая задача ===

Имеется поле размером 50х50 квадратных клеток. Каждая клетка может быть либо заполненной (значение "1"), либо пустой (значение "0"). Конкретное сочетание заполненных и пустых клеток поля называется конфигурацией.

У каждой конфигурации есть "потомок". Он определяется по правилам клеточного автомата Дж. Конвея "Жизнь" (https://ru.wikipedia.org/wiki/Игра_«Жизнь»). Замена конфигурации на её потомка называется шагом клеточного автомата (не сменой поколений, чтобы не путать с поколениями из генетического алгоритма).

Ограниченность поля учитывается следующим образом: для клетки, находящейся на границе поля (в т.ч. в углу), её соседи, находящиеся за границей поля, считаются всегда пустыми. Как если бы поле было окружено рамкой из постоянных "нулей".

Среди конфигураций, удовлетворяющих заданному ограничению, ТРЕБУЕТСЯ найти ту, на которой максимизируется значение заданного критерия.

Критерий: количество заполненных клеток после 100 шагов клеточного автомата (т.е. в 101-й конфигурации, в нумерации с 1).

Ограничение: конфигурация, возникающая после 100 шагов клеточного автомата, не является стационарной. Т.е. её потомок (результат следующего шага клеточного автомата) не совпадает с ней.

=== Требования к реализации генетического алгоритма (ГА) ===

Необходимо реализовать "обычный" генетический алгоритм согласно описанию из лекций В.А. Костенко (https://asvk.cs.msu.su/sites/all/themes/professional_theme/files/Kostenko/K_2020/%D0%9B7_8_%D0%93%D0%90.ppt). Более детальное описание ГА, в т.ч. операций селекции, скрещивания и мутации, можно найти в материале: http://qai.narod.ru/Publications/tsoy_chapterGA.pdf

Уточнение описанной в лекции схемы: по ходу выполнения алгоритма необходимо запоминать лучшее из найденных решений и обновлять его (если найдено ещё лучшее). При этом НЕ включая его в обязательном порядке в каждую из последующих популяций. Смысл - не потерять лучшее решение, найденное на какой-то из промежуточных итераций ГА.

Алгоритм должен быть реализован в виде:
* головного класса, реализующего основной цикл ГА
* абстрактных классов для операций ГА и вычисления функции выживаемости
* конкретных классов, реализующих операции ГА и вычисление функции выживаемости
(организация классов - по аналогии с заданием по параллельному ИО)

Решение можно представлять без абстракции, сразу в виде битового вектора. Это соответствует классической схеме ГА, в которой представление решения в виде битовой строки уже является его абстрагированием.

ВНИМАНИЕ: использование свободно доступной реализации движка клеточного автомата "Жизнь" - допустимо. Но некорректность работы сдаваемой реализации, связанная с ошибкой в таком движке или в интеграции его с ГА, считается полновесной ошибкой (отсылки к "глючности" заимствованного движка не являются оправданиями).

Конкретизация алгоритма:
~~~~~~~~~~~~~~~~~~~~~~~~

Функция выживаемости: значение оптимизируемого критерия. Возможно, с добавлением штрафа (о штрафе написано ниже).

Размер популяции: Npop=100.

Кодирование решения битовым вектором: очевидное, с учётом того что у каждой клетки поля два возможных значения.

Операция мутации: как в лекциях, т.е. каждый бит решения мутирует (инвертируется) с вероятностью Pmut. Значение Pmut изменяется в ходе исследования (см. ниже). В ходе конкретного выполнения алгоритма Pmut должно быть зафиксировано.

Операция селекции:
* S2: рулеточная селекция

Операция скрещивания:
* Х2: двухточечное скрещивание

Вероятность скрещивания: 0.8

Допускать или не допускать в популяцию решения, не удовлетворяющие ограничению (т.е. становящиеся стационарными через N шагов клеточного автомата): выбор на усмотрение студента.
а) штрафовать решение, не удовлетворяющее ограничению (искусственно снижать значение критерия на нём)
б) отбрасывать решения, не удовлетворяющие ограничению (и повторно выполнять операцию мутации или скрещивания, породившую отброшенное решение - чтобы в силу рандомизации со следующей попытки эта операция породила решение, удовлетворяющее ограничению)

Вариант а) рискован тем, что можно "застрять" в области некорректных (не удовлетворяющих ограничению) решений. Некорректные решения нельзя запоминать в качестве "текущих лучших", а также выдавать в качестве итогового результата.

В варианте б) важно не зациклиться на попытках формирования корректных решений. Против такого зацикливания нужно принимать меры.

Критерий останова: 20 итераций ГА (т.е. 20 смен популяций) без улучшения значения оптимизируемого критерия.

=== Выбор операций селекции и скрещивания ===

Выбор операции селекции: на основании остатка от деления на 3 контрольной суммы CRC32 от фамилии и инициалов студента (в формате "ИвановАБ").
Онлайн-расчёт CRC32: https://ru.functions-online.com/crc32.html
* остаток 1: вариант S1
* остаток 2: вариант S2
* остаток 0: вариант S3

Выбор операции скрещивания: на основании чётности контрольной суммы CRC32 от фамилии и инициалов студента (в формате "ИвановАБ").
Если контрольная сумма нечётная, то вариант Х1. Если чётная, то вариант Х2.

== Требования к исследованию ==

Все входные данные описаны выше и являются, в основном, настройками алгоритма.

Необходимо исследовать зависимость характеристик работы алгоритма от интенсивности мутации, т.е. от значения Pmut.
Начальное значение Pmut: Pmut_init = 1/(50*50) = 0.0004, т.е. в среднем в каждом решении мутирует 1 бит. 

Изменять Pmut в ходе исследования следует по формуле: Pmut(i)=Pmut_init*(1.5^i), i=0, ..., 9; i - номер серии экспериментов, т.е. нужно провести 10 серий экспериментов, каждая со своим фиксированным значением Pmut. Например, в серии 3 Pmut=Pmut(3)=0.0004*(1.5^3)=0.00135

Для каждого значения i необходимо провести серию из 10 запусков ГА с соответствующим значением Pmut=Pmut(i) и определить:
* стабильность алгоритма (разброс значений критерия на решении-результате, т.е. разность между значениями критерия на худшем и на лучшем прогоне)
* качество работы алгоритма (значение критерия на лучшем прогоне)
* вычислительные затраты на выполнение алгоритма (количество процессорного времени, затраченного на прогон; брать максимум по 10 прогонам)

В отчёт по исследованию должны входить:
* график зависимости стабильности алгоритма от значения Pmut
* график зависимости качества работы алгоритма от значения Pmut
* график зависимости времени прогона от значения Pmut

На горизонтальной оси графика откладывать значение i.

ВНИМАНИЕ: не забудьте перезапускать датчик случайных чисел, чтобы он каждый раз выдавал новую последовательность. На задании по ИО были примеры, когда перезапустить забывали, и алгоритм работал детерминированно.

Визуализация:
* для каждого прогона алгоритма, в файл должно быть сохранено наилучшее найденное решение, а также результат работы клеточного автомата через 100 шагов. Сохранять нужно в виде визуально читающейся матрицы 50х50, где "-" - незаполненная клетка, "Х" - заполненная. Пример матрицы 3х3 ("планер"):

-Х-
Х--  
ХХХ

* имя файла с решением должно иметь вид: series_*_run_*_sol.txt, где вместо звездочек указаны значение i и номер прогона в рамках серии для этого i. Пример: series_10_run_1.txt, series_100_run_10.txt
* имя файла с результатом работы клеточного автомата через 100 шагов должно иметь вид: series_*_run_*_sol_after100.txt

* бонус (+1 балл): пошаговая визуализация работы клеточного автомата на наилучшем найденном решении в течение 100 шагов. Например, в текстовом терминале. Формат вывода матрицы - как для файла (см. выше). Частота смены поколений - два поколения в секунду. Перерисовываться поле должно "красиво и на том же месте", а не прокруткой экрана. Вдохновиться можно веб-имитатором по ссылке: https://life.written.ru/ ; он, кстати, правильно отрабатывает граничные эффекты.

== Рекомендации по отладке движка клеточного автомата ==

Проверьте, как ведут себя такие известные конфигурации, как "планер" и другие нестационарные конфигурации со страницы https://life.written.ru/game_of_life_review_by_gardner

Отдельно проверьте правильность обработки границ поля. Поставьте на границе (в т.ч. в углу поля) какую-нибудь стационарную конфигурацию. Запустите на границу "планер".

В отладке сильно поможет визуализатор - тот самый, за который даётся бонус.

Проверка движка _настоятельно рекомендуется_ в т.ч. в случае использования заимствованного движка.

== Рекомендации по автоматизации исследования ==

Рекомендуется полностью автоматизировать запуск серии экспериментов, хотя бы для заданного значения i, с помощью командного сценария (i - параметр сценария). Командный сценарий передаёт значение i и номер эксперимента в рамках серии в реализацию алгоритма при запуске её исполняемого файла. Также командный сценарий замеряет время выполнения каждого запуска, получает от алгоритма значение целевой функции на итоговом решении (например, через временный файл), и сохраняет эти два числа в файл протокола запуска (например, в формате CSV; в каждой строчке - длительность запуска и значение целевой функции).

Отлаживать сценарий такого "пакетного" выполнения запусков рекомендуется на задаче с урезанными параметрами, например при значительно сокращенном размере поля и количестве шагов клеточного автомата. Чтобы пакет экспериментов выполнялся быстрее. Полноценные эксперименты запускать с помощью уже отлаженного командного сценария.